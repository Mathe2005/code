<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Discord Bot Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --bg-color: #36393f;
            --sidebar-bg: #2f3131;
            --text-color: #dcddde;
            --accent-color: #7289da;
        }

        body {
            background-color: var(--bg-color);
            color: var(--text-color);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .navbar {
            background-color: var(--sidebar-bg) !important;
        }

        .sidebar {
            background-color: var(--sidebar-bg);
            min-height: calc(100vh - 56px);
            position: sticky;
            top: 0;
            width: 250px;
            overflow: hidden;
        }

        .main-content {
            transition: margin-left 0.3s ease;
        }

        .nav-link {
            display: flex;
            align-items: center;
            white-space: nowrap;
        }

        .nav-link i {
            width: 20px;
            margin-right: 10px;
            text-align: center;
        }

        @media (max-width: 768px) {
            .sidebar {
                position: static;
                min-height: auto;
                width: 100% !important;
            }
        }

        .card {
            background-color: var(--sidebar-bg);
            border: 1px solid #40444b;
        }

        .btn-primary {
            background-color: var(--accent-color);
            border-color: var(--accent-color);
        }

        .form-control, .form-select {
            background-color: #40444b;
            border-color: #40444b;
            color: var(--text-color);
        }

        .form-control:focus, .form-select:focus {
            background-color: #40444b;
            border-color: var(--accent-color);
            color: var(--text-color);
            box-shadow: 0 0 0 0.2rem rgba(114, 137, 218, 0.25);
        }

        .table-dark {
            --bs-table-bg: var(--sidebar-bg);
        }

        .theme-toggle {
            cursor: pointer;
        }

        .role-badge {
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            white-space: nowrap;
            margin: 2px;
            position: relative;
            font-size: 12px;
            font-weight: 500;
            border-radius: 3px;
            padding: 2px 6px;
        }

        .remove-role-btn {
            opacity: 0;
            transition: opacity 0.2s ease;
            margin-left: 4px;
            width: 14px;
            height: 14px;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
            background: rgba(0,0,0,0.3);
            border-radius: 2px;
            font-size: 10px;
        }

        .role-badge:hover .remove-role-btn {
            opacity: 1 !important;
        }

        .add-role-btn {
            border: 1px dashed #6c757d;
            color: #6c757d;
            transition: all 0.2s ease;
        }

        .add-role-btn:hover {
            border-color: var(--accent-color);
            color: var(--accent-color);
        }

        .add-role-dropdown {
            position: absolute;
            background: var(--sidebar-bg);
            border: 1px solid #40444b;
            border-radius: 4px;
            z-index: 1000;
            max-height: 200px;
            overflow-y: auto;
            min-width: 150px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        .add-role-dropdown .dropdown-item {
            padding: 8px 12px;
            cursor: pointer;
            color: var(--text-color);
            transition: background-color 0.2s ease;
        }

        .add-role-dropdown .dropdown-item:hover {
            background-color: #40444b;
        }

        .role-configs-container {
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #40444b;
            border-radius: 8px;
            padding: 15px;
            background-color: #36393f;
        }

        .role-config-row {
            background-color: #40444b !important;
            border: 1px solid #4f545c !important;
            border-radius: 8px !important;
            padding: 15px !important;
            margin-bottom: 15px !important;
        }

        .role-config-row:last-child {
            margin-bottom: 0 !important;
        }

        .role-config-row .form-label {
            color: var(--text-color);
            font-weight: 500;
            margin-bottom: 5px;
        }

        .role-config-row .form-control,
        .role-config-row .form-select {
            background-color: #36393f;
            border: 1px solid #4f545c;
            color: var(--text-color);
        }

        .role-config-row .form-control:focus,
        .role-config-row .form-select:focus {
            background-color: #36393f;
            border-color: var(--accent-color);
            color: var(--text-color);
            box-shadow: 0 0 0 0.2rem rgba(114, 137, 218, 0.25);
        }

        .preview-text {
            font-family: 'Courier New', monospace;
            background-color: #2f3136;
            padding: 5px 8px;
            border-radius: 4px;
            border: 1px solid #4f545c;
        }

        /* Enhanced notification styles */
        .notification-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            max-width: 400px;
        }

        .notification {
            background: linear-gradient(135deg, #2f3136, #36393f);
            border: 1px solid;
            border-radius: 12px;
            padding: 16px 20px;
            margin-bottom: 10px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(10px);
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .notification.show {
            opacity: 1;
            transform: translateX(0);
        }

        .notification.success {
            border-color: #00d26a;
            background: linear-gradient(135deg, rgba(0, 210, 106, 0.1), rgba(0, 210, 106, 0.05));
        }

        .notification.error {
            border-color: #ff6b6b;
            background: linear-gradient(135deg, rgba(255, 107, 107, 0.1), rgba(255, 107, 107, 0.05));
        }

        .notification.info {
            border-color: var(--accent-color);
            background: linear-gradient(135deg, rgba(114, 137, 218, 0.1), rgba(114, 137, 218, 0.05));
        }

        .notification.warning {
            border-color: #ffa500;
            background: linear-gradient(135deg, rgba(255, 165, 0, 0.1), rgba(255, 165, 0, 0.05));
        }

        .notification-content {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .notification-icon {
            font-size: 24px;
            flex-shrink: 0;
        }

        .notification.success .notification-icon {
            color: #00d26a;
        }

        .notification.error .notification-icon {
            color: #ff6b6b;
        }

        .notification.info .notification-icon {
            color: var(--accent-color);
        }

        .notification.warning .notification-icon {
            color: #ffa500;
        }

        .notification-text {
            flex: 1;
        }

        .notification-title {
            font-weight: 600;
            font-size: 16px;
            margin-bottom: 2px;
        }

        .notification-message {
            font-size: 14px;
            opacity: 0.9;
        }

        .notification-close {
            background: none;
            border: none;
            color: var(--text-color);
            opacity: 0.7;
            cursor: pointer;
            padding: 4px;
            border-radius: 4px;
            transition: all 0.2s ease;
            flex-shrink: 0;
        }

        .notification-close:hover {
            opacity: 1;
            background-color: rgba(255, 255, 255, 0.1);
        }

        .notification-progress {
            position: absolute;
            bottom: 0;
            left: 0;
            height: 3px;
            background: linear-gradient(90deg, transparent, currentColor, transparent);
            transition: width 0.1s linear;
        }

        .notification.success .notification-progress {
            background: linear-gradient(90deg, transparent, #00d26a, transparent);
        }

        .notification.error .notification-progress {
            background: linear-gradient(90deg, transparent, #ff6b6b, transparent);
        }

        .notification.info .notification-progress {
            background: linear-gradient(90deg, transparent, var(--accent-color), transparent);
        }

        .notification.warning .notification-progress {
            background: linear-gradient(90deg, transparent, #ffa500, transparent);
        }

        /* Button loading state */
        .btn.loading {
            position: relative;
            color: transparent !important;
        }

        .btn.loading::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            margin-top: -10px;
            margin-left: -10px;
            border: 2px solid #ffffff;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Member card styles */
        .member-card {
            background-color: var(--sidebar-bg);
            border: 1px solid #40444b;
            transition: transform 0.2s, border-color 0.2s, box-shadow 0.2s;
            cursor: pointer;
        }

        .member-card:hover {
            transform: translateY(-5px);
            border-color: var(--accent-color);
            box-shadow: 0 8px 16px rgba(0,0,0,0.3);
        }

        .member-avatar {
            transition: transform 0.2s, border 0.2s;
            border: 2px solid transparent;
        }

        .member-avatar:hover {
            transform: scale(1.1);
            border-color: #007bff;
        }

        /* Modal styles */
        .modal {
            display: none; 
            position: fixed; 
            z-index: 1050; 
            left: 0; 
            top: 0; 
            width: 100%; 
            height: 100%; 
            overflow: auto; 
            background-color: rgba(0,0,0,0.6); 
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background-color: #2f3136; 
            margin: 10% auto; 
            padding: 30px; 
            border: 1px solid #4a4a4a; 
            border-radius: 8px; 
            width: 80%; 
            max-width: 500px; 
            color: #ffffff; 
            box-shadow: 0 15px 35px rgba(0,0,0,0.5);
        }

        .modal-header {
            border-bottom: 1px solid #4a4a4a; 
            padding-bottom: 15px; 
            margin-bottom: 20px;
        }

        .modal-title {
            font-weight: 600;
        }

        .modal-close-button {
            background: none; 
            border: none; 
            color: #dcddde; 
            opacity: 0.7; 
            cursor: pointer; 
            font-size: 1.75rem; 
            line-height: 1; 
            padding: 0; 
            float: right;
        }

        .modal-close-button:hover {
            opacity: 1;
        }

        .modal-body {
            margin-bottom: 20px;
        }

        .modal-footer {
            border-top: 1px solid #4a4a4a; 
            padding-top: 15px; 
            display: flex; 
            justify-content: flex-end; 
            gap: 10px;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <i class="fab fa-discord"></i> Bot Dashboard
            </a>
            <div class="navbar-nav ms-auto">
                <% if (user) { %>
                    <div class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <div class="d-flex align-items-center">
                                <% if (user.avatar) { %>
                                    <img src="https://cdn.discordapp.com/avatars/<%= user.id %>/<%= user.avatar %><%= user.avatar.startsWith('a_') ? '.gif' : '.png' %>?size=128" 
                                         alt="User Avatar" class="rounded-circle me-2" style="width: 32px; height: 32px;">
                                <% } else { %>
                                    <img src="https://cdn.discordapp.com/embed/avatars/<%= parseInt(user.discriminator) % 5 %>.png" 
                                         alt="User Avatar" class="rounded-circle me-2" style="width: 32px; height: 32px;">
                                <% } %>
                            </div>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li><a class="dropdown-item" href="/dashboard">მთავარი გვერდი</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="/logout">გასვლა</a></li>
                        </ul>
                    </div>

                <% } else { %>
                    <a class="nav-link" href="/auth/discord">Login with Discord</a>
                <% } %>
            </div>
        </div>
    </nav>

    <!-- Notification Container -->
    <div class="notification-container" id="notificationContainer"></div>

    <main>
        <div class="container-fluid mt-4">
            <div class="row">
                <div class="col-auto p-0">
                    <div class="sidebar p-3" id="sidebar">
                        <h5>
                            <i class="fas fa-server"></i> <span class="nav-text"><%= guild.name %></span>
                        </h5>
                        <hr>
                        <nav class="nav flex-column">
                            <a class="nav-link active" href="#overview" data-section="overview">
                                <i class="fas fa-chart-pie"></i> <span class="nav-text">Overview</span>
                            </a>
                            <a class="nav-link" href="#members" data-section="members">
                                <i class="fas fa-users"></i> <span class="nav-text">Members</span>
                            </a>
                            <a class="nav-link" href="#logs" data-section="logs">
                                <i class="fas fa-clipboard-list"></i> <span class="nav-text">Audit Logs</span>
                            </a>
                            <a class="nav-link" href="/dashboard/<%= guild.id %>/music">
                                <i class="fas fa-music"></i> <span class="nav-text">Music Player</span>
                            </a>
                            <a class="nav-link" href="/dashboard/<%= guild.id %>/configuration">
                                <i class="fas fa-cog"></i> <span class="nav-text">Bot Configuration</span>
                            </a>
                        </nav>
                    </div>
                </div>

                <div class="col main-content" id="mainContent">
                    <!-- Overview Section -->
                    <div id="overview" class="section active">
                        <h3><i class="fas fa-chart-pie"></i> Server Overview</h3>
                        <div class="row mt-3">
                            <div class="col-md-6 mb-3">
                                <div class="card">
                                    <div class="card-body">
                                        <h5><i class="fas fa-users"></i> Members</h5>
                                        <h2 class="text-primary"><%= guild.memberCount %></h2>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="card">
                                    <div class="card-body">
                                        <h5><i class="fas fa-circle text-success"></i> Online</h5>
                                        <h2 class="text-success"><%= guild.onlineCount %></h2>
                                    </div>
                                </div>
                            </div>
                        </div>




                        <div class="card mt-3">
                            <div class="card-body">
                                <h5>Quick Settings</h5>
                                <div class="mb-3">
                                    <label class="form-label">Command Prefix</label>
                                    <input type="text" class="form-control" id="prefix" value="<%= config.prefix %>" maxlength="5">
                                </div>
                                <button class="btn btn-primary" id="saveOverviewBtn">
                                    <i class="fas fa-save"></i> Save Changes
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Members Section -->
                    <div id="members" class="section" style="display: none;">
                        <h3><i class="fas fa-users"></i> Members Management</h3>

                        <!-- Member filters -->
                        <div class="card mt-3">
                            <div class="card-body">
                                <div class="row mb-3">
                                    <div class="col-md-3">
                                        <input type="text" class="form-control" id="member-search" placeholder="Search members...">
                                    </div>
                                    <div class="col-md-3">
                                        <select class="form-select" id="member-role-filter">
                                            <option value="">All Roles</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <select class="form-select" id="member-sort">
                                            <option value="newest">Newest First</option>
                                            <option value="oldest">Oldest First</option>
                                            <option value="username">Username A-Z</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <button class="btn btn-primary" id="refresh-members">
                                            <i class="fas fa-sync-alt"></i> Refresh
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Members list -->
                        <div class="card mt-3">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5><i class="fas fa-users"></i> Server Members</h5>
                                <span id="member-count" class="badge bg-primary">Loading...</span>
                            </div>
                            <div class="card-body">
                                <!-- Toggle between table and card view -->
                                <div class="mb-3">
                                    <button class="btn btn-sm btn-primary me-2" onclick="toggleMemberView('table')" id="table-view-btn">
                                        <i class="fas fa-table"></i> Table View
                                    </button>
                                    <button class="btn btn-sm btn-outline-primary" onclick="toggleMemberView('cards')" id="card-view-btn">
                                        <i class="fas fa-th-large"></i> Card View
                                    </button>
                                </div>

                                <!-- Table view -->
                                <div class="table-responsive" id="table-view">
                                    <table class="table table-dark table-striped">
                                        <thead>
                                            <tr>
                                                <th>Member</th>
                                                <th>Nickname</th>
                                                <th>Roles</th>
                                                <th>Joined</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody id="members-tbody">
                                            <tr>
                                                <td colspan="5" class="text-center">
                                                    <i class="fas fa-spinner fa-spin"></i> Loading members...
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>

                                <!-- Card view -->
                                <div class="row" id="card-view" style="display: none;">
                                    <div id="members-cards" class="row">
                                        <div class="col-12 text-center">
                                            <i class="fas fa-spinner fa-spin"></i> Loading members...
                                        </div>
                                    </div>
                                </div>

                                <!-- Pagination for members -->
                                <nav aria-label="Members pagination" id="members-pagination-container" style="display: none;">
                                    <ul class="pagination justify-content-center" id="members-pagination">
                                    </ul>
                                </nav>
                            </div>
                        </div>
                    </div>

                    <!-- Logs Section -->
                    <div id="logs" class="section" style="display: none;">
                        <h3><i class="fas fa-clipboard-list"></i> Audit Logs</h3>
                        <div class="card mt-3">
                            <div class="card-header">
                                <h5><i class="fas fa-clipboard-list"></i> Server Activity Logs</h5>
                            </div>
                            <div class="card-body">
                                <!-- Filters -->
                                <div class="row mb-3">
                                    <div class="col-md-3">
                                        <label for="filter-action" class="form-label">Action</label>
                                        <select class="form-select" id="filter-action">
                                            <option value="">All Actions</option>
                                            <!-- Moderation -->
                                            <option value="KICK">Kick</option>
                                            <option value="BAN">Ban</option>
                                            <option value="MEMBER_UNBAN">Unban</option>
                                            <option value="TIMEOUT">Timeout</option>
                                            <option value="TIMEOUT_REMOVE">Timeout Remove</option>
                                            <option value="WARN">Warn</option>
                                            <!-- Member -->
                                            <option value="MEMBER_JOIN">Member Join</option>
                                            <option value="MEMBER_LEAVE">Member Leave</option>
                                            <option value="NICKNAME_CHANGE">Nickname Change</option>
                                            <option value="MEMBER_UPDATE">Member Update</option>
                                            <!-- Message -->
                                            <option value="MESSAGE_DELETE">Message Delete</option>
                                            <option value="MESSAGE_EDIT">Message Edit</option>
                                            <option value="BULK_DELETE">Bulk Delete</option>
                                            <option value="MESSAGE_PIN">Message Pin</option>
                                            <option value="MESSAGE_UNPIN">Message Unpin</option>
                                            <!-- Channel -->
                                            <option value="CHANNEL_CREATE">Channel Create</option>
                                            <option value="CHANNEL_DELETE">Channel Delete</option>
                                            <option value="CHANNEL_UPDATE">Channel Update</option>
                                            <option value="LOCK_CHANNEL">Lock Channel</option>
                                            <option value="UNLOCK_CHANNEL">Unlock Channel</option>
                                            <option value="CHANNEL_SLOWMODE">Channel Slowmode</option>
                                            <!-- Role -->
                                            <option value="ROLE_CREATE">Role Create</option>
                                            <option value="ROLE_DELETE">Role Delete</option>
                                            <option value="ROLE_UPDATE">Role Update</option>
                                            <option value="ROLE_ADD">Role Add</option>
                                            <option value="ROLE_REMOVE">Role Remove</option>
                                            <!-- Server -->
                                            <option value="SERVER_UPDATE">Server Update</option>
                                            <option value="SERVER_BOOST">Server Boost</option>
                                            <option value="VOICE_JOIN">Voice Join</option>
                                            <option value="VOICE_LEAVE">Voice Leave</option>
                                            <option value="VOICE_MOVE">Voice Move</option>
                                            <!-- Music -->
                                            <option value="MUSIC_PLAY">Music Play</option>
                                            <option value="MUSIC_SKIP">Music Skip</option>
                                            <option value="MUSIC_STOP">Music Stop</option>
                                            <option value="MUSIC_VOLUME">Music Volume</option>
                                            <!-- Config -->
                                            <option value="BOT_CONFIG_UPDATE">Bot Config Update</option>
                                            <option value="COMMAND_USED">Command Used</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <label for="filter-category" class="form-label">Category</label>
                                        <select class="form-select" id="filter-category">
                                            <option value="">All Categories</option>
                                            <option value="MODERATION">Moderation</option>
                                            <option value="MEMBER">Member</option>
                                            <option value="MESSAGE">Message</option>
                                            <option value="CHANNEL">Channel</option>
                                            <option value="ROLE">Role</option>
                                            <option value="SERVER">Server</option>
                                            <option value="MUSIC">Music</option>
                                            <option value="CONFIG">Configuration</option>
                                            <option value="SYSTEM">System</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <label for="filter-search" class="form-label">Search</label>
                                        <input type="text" class="form-control" id="filter-search" placeholder="Search logs...">
                                    </div>
                                    <div class="col-md-3">
                                        <label for="filter-start-date" class="form-label">Start Date</label>
                                        <input type="date" class="form-control" id="filter-start-date">
                                    </div>
                                </div>

                                <div class="row mb-3">
                                    <div class="col-md-3">
                                        <label for="filter-end-date" class="form-label">End Date</label>
                                        <input type="date" class="form-control" id="filter-end-date">
                                    </div>
                                </div>

                                <div class="row mb-3">
                                    <div class="col-12">
                                        <button class="btn btn-secondary" id="clear-filters">
                                            <i class="fas fa-times"></i> Clear Filters
                                        </button>
                                        <span class="ms-3 text-muted" id="log-count">Showing logs...</span>
                                        <span class="ms-3" id="live-indicator">
                                            <i class="fas fa-circle text-success" style="font-size: 8px;"></i>
                                            <small class="text-success">Live</small>
                                        </span>
                                    </div>
                                </div>

                                <div class="table-responsive">
                                    <table class="table table-dark table-striped" id="logsTable">
                                        <thead>
                                            <tr>
                                                <th>Timestamp</th>
                                                <th>Category</th>
                                                <th>Action</th>
                                                <th>Moderator</th>
                                                <th>Target</th>
                                                <th>Reason</th>
                                            </tr>
                                        </thead>
                                        <tbody id="audit-logs-tbody">
                                            <tr>
                                                <td colspan="6" class="text-center">
                                                    <i class="fas fa-spinner fa-spin"></i> Loading logs...
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>

                                <!-- Pagination -->
                                <nav aria-label="Audit logs pagination" id="pagination-container" style="display: none;">
                                    <ul class="pagination justify-content-center" id="pagination">
                                    </ul>
                                </nav>
                            </div>
                        </div>
                    </div>




                </div>
            </div>
        </div>
    </main>

    <!-- Moderation Modal -->
    <div class="modal" id="moderationModal" style="display: none; position: fixed; z-index: 1050; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.6); backdrop-filter: blur(5px);">
        <div class="modal-content" style="background-color: #2f3136; margin: 10% auto; padding: 30px; border: 1px solid #4a4a4a; border-radius: 8px; width: 80%; max-width: 500px; color: #ffffff; box-shadow: 0 15px 35px rgba(0,0,0,0.5);">
            <div class="modal-header" style="border-bottom: 1px solid #4a4a4a; padding-bottom: 15px; margin-bottom: 20px;">
                <h5 class="modal-title" id="modalMemberName"></h5>
                <button type="button" class="modal-close-button" onclick="closeModerationModal()" style="background: none; border: none; color: #dcddde; opacity: 0.7; cursor: pointer; font-size: 1.75rem; line-height: 1; padding: 0; float: right;">
                    &times;
                </button>
            </div>
            <div class="modal-body" style="margin-bottom: 20px;">
                <p>Member ID: <span id="modalMemberId"></span></p>
                <label for="moderationReason" style="font-weight: 500; margin-bottom: 8px; display: block;">Reason:</label>
                <textarea id="moderationReason" rows="3" placeholder="Optional reason for action" style="background-color: #202225; border: 1px solid #4a4a4a; color: #ffffff; padding: 10px; border-radius: 4px; width: 100%; margin-bottom: 15px; resize: vertical; min-height: 80px;"></textarea>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <button class="btn btn-sm btn-primary" onclick="showRoleManagementModal()">
                        <i class="fas fa-user-tag"></i> Manage Roles
                    </button>
                    <button class="btn btn-sm btn-warning" onclick="changeNicknameFromModal()">
                        <i class="fas fa-signature"></i> Change Nickname
                    </button>
                </div>
            </div>
            <div class="modal-footer" style="border-top: 1px solid #4a4a4a; padding-top: 15px; display: flex; justify-content: flex-end; gap: 10px;">
                <button class="btn btn-secondary" onclick="closeModerationModal()">Cancel</button>
                <button class="btn btn-danger" onclick="submitKickBanAction('kick')">Kick</button>
                <button class="btn btn-danger" onclick="submitKickBanAction('ban')">Ban</button>
            </div>
        </div>
    </div>

    <!-- Role Management Modal -->
    <div class="modal" id="roleManagementModal" style="display: none; position: fixed; z-index: 1050; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.6); backdrop-filter: blur(5px);">
        <div class="modal-content" style="background-color: #2f3136; margin: 10% auto; padding: 30px; border: 1px solid #4a4a4a; border-radius: 8px; width: 80%; max-width: 500px; color: #ffffff; box-shadow: 0 15px 35px rgba(0,0,0,0.5);">
            <div class="modal-header" style="border-bottom: 1px solid #4a4a4a; padding-bottom: 15px; margin-bottom: 20px;">
                <h5 class="modal-title" id="roleModalMemberName"></h5>
                <button type="button" class="modal-close-button" onclick="closeRoleManagementModal()" style="background: none; border: none; color: #dcddde; opacity: 0.7; cursor: pointer; font-size: 1.75rem; line-height: 1; padding: 0; float: right;">
                    &times;
                </button>
            </div>
            <div class="modal-body" style="margin-bottom: 20px;">
                <p>Add/Remove Roles:</p>
                <div id="roleList">
                    <% guild.roles.forEach(role => { %>
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="checkbox" id="role_<%= role.id %>" value="<%= role.id %>">
                            <label class="form-check-label" for="role_<%= role.id %>">
                                <%= role.name %>
                            </label>
                        </div>
                    <% }); %>
                </div>
            </div>
            <div class="modal-footer" style="border-top: 1px solid #4a4a4a; padding-top: 15px; display: flex; justify-content: flex-end; gap: 10px;">
                <button class="btn btn-secondary" onclick="closeRoleManagementModal()">Close</button>
                <button class="btn btn-primary" onclick="updateMemberRoles()">Save Changes</button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // WebSocket connection management
        let ws = null;
        let wsConnected = false;
        let reconnectAttempts = 0;
        let maxReconnectAttempts = 5;
        let reconnectInterval = 2000;
        let connectionCheckInterval = null;
        
        // Connection status indicator
        function updateConnectionStatus(connected) {
            wsConnected = connected;
            const liveIndicator = document.getElementById('live-indicator');
            if (liveIndicator) {
                if (connected) {
                    liveIndicator.innerHTML = `
                        <i class="fas fa-circle text-success" style="font-size: 8px;"></i>
                        <small class="text-success">Live</small>
                    `;
                } else {
                    liveIndicator.innerHTML = `
                        <i class="fas fa-circle text-danger" style="font-size: 8px;"></i>
                        <small class="text-danger">Disconnected</small>
                    `;
                }
            }
            
            // Show offline overlay when disconnected
            if (!connected) {
                showOfflineOverlay();
            } else {
                hideOfflineOverlay();
            }
        }
        
        // Create offline overlay
        function createOfflineOverlay() {
            const overlay = document.createElement('div');
            overlay.id = 'offline-overlay';
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(5px);
                z-index: 10000;
                display: none;
                justify-content: center;
                align-items: center;
                color: white;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            `;
            
            overlay.innerHTML = `
                <div style="text-align: center; background: #2f3136; padding: 40px; border-radius: 12px; box-shadow: 0 8px 32px rgba(0,0,0,0.4);">
                    <i class="fas fa-wifi-slash" style="font-size: 48px; color: #ff6b6b; margin-bottom: 20px;"></i>
                    <h3 style="margin-bottom: 15px;">Connection Lost</h3>
                    <p style="margin-bottom: 25px; opacity: 0.8;">The server connection has been lost. Please check your internet connection or try refreshing the page.</p>
                    <div style="display: flex; gap: 15px; justify-content: center;">
                        <button onclick="location.reload()" class="btn btn-primary">
                            <i class="fas fa-sync-alt"></i> Refresh Page
                        </button>
                        <button onclick="attemptReconnect()" class="btn btn-outline-primary">
                            <i class="fas fa-plug"></i> Reconnect
                        </button>
                    </div>
                    <div id="reconnect-status" style="margin-top: 15px; font-size: 14px; opacity: 0.7;"></div>
                </div>
            `;
            
            document.body.appendChild(overlay);
            return overlay;
        }
        
        function showOfflineOverlay() {
            let overlay = document.getElementById('offline-overlay');
            if (!overlay) {
                overlay = createOfflineOverlay();
            }
            overlay.style.display = 'flex';
        }
        
        function hideOfflineOverlay() {
            const overlay = document.getElementById('offline-overlay');
            if (overlay) {
                overlay.style.display = 'none';
            }
        }
        
        // WebSocket connection functions
        function connectWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}`;
            
            try {
                ws = new WebSocket(wsUrl);
                
                ws.onopen = function() {
                    console.log('WebSocket connected');
                    updateConnectionStatus(true);
                    reconnectAttempts = 0;
                    
                    // Subscribe to guild updates
                    ws.send(JSON.stringify({
                        type: 'subscribe',
                        guildId: '<%= guild.id %>'
                    }));
                    
                    // Update reconnect status
                    const reconnectStatus = document.getElementById('reconnect-status');
                    if (reconnectStatus) {
                        reconnectStatus.textContent = '';
                    }
                };
                
                ws.onmessage = function(event) {
                    try {
                        const data = JSON.parse(event.data);
                        handleWebSocketMessage(data);
                    } catch (error) {
                        console.error('Error parsing WebSocket message:', error);
                    }
                };
                
                ws.onclose = function(event) {
                    console.log('WebSocket disconnected:', event.code, event.reason);
                    updateConnectionStatus(false);
                    
                    // Attempt to reconnect
                    if (reconnectAttempts < maxReconnectAttempts) {
                        setTimeout(() => {
                            reconnectAttempts++;
                            const reconnectStatus = document.getElementById('reconnect-status');
                            if (reconnectStatus) {
                                reconnectStatus.textContent = `Reconnecting... (${reconnectAttempts}/${maxReconnectAttempts})`;
                            }
                            connectWebSocket();
                        }, reconnectInterval);
                        reconnectInterval = Math.min(reconnectInterval * 1.5, 10000); // Exponential backoff
                    } else {
                        const reconnectStatus = document.getElementById('reconnect-status');
                        if (reconnectStatus) {
                            reconnectStatus.textContent = 'Connection failed. Please refresh the page.';
                        }
                    }
                };
                
                ws.onerror = function(error) {
                    console.error('WebSocket error:', error);
                    updateConnectionStatus(false);
                };
                
            } catch (error) {
                console.error('Failed to create WebSocket connection:', error);
                updateConnectionStatus(false);
            }
        }
        
        function attemptReconnect() {
            const reconnectStatus = document.getElementById('reconnect-status');
            if (reconnectStatus) {
                reconnectStatus.textContent = 'Attempting to reconnect...';
            }
            
            reconnectAttempts = 0;
            reconnectInterval = 2000;
            connectWebSocket();
        }
        
        function handleWebSocketMessage(data) {
            // Handle real-time updates from server
            switch (data.type) {
                case 'audit_log_update':
                    // Refresh audit logs if we're on the logs section
                    const currentSection = document.querySelector('.section[style="display: block;"]');
                    if (currentSection && currentSection.id === 'logs') {
                        loadAuditLogs(auditCurrentPage, auditCurrentFilters);
                    }
                    break;
                case 'member_update':
                    // Refresh members if we're on the members section
                    const memberSection = document.querySelector('#members[style="display: block;"]');
                    if (memberSection) {
                        loadMembersData(1, false);
                    }
                    break;
                case 'guild_update':
                    // Refresh page data
                    location.reload();
                    break;
            }
        }
        
        // Connection health check
        function startConnectionHealthCheck() {
            connectionCheckInterval = setInterval(() => {
                if (!wsConnected || !ws || ws.readyState !== WebSocket.OPEN) {
                    updateConnectionStatus(false);
                    
                    // Try to reconnect if not already trying
                    if (reconnectAttempts === 0) {
                        attemptReconnect();
                    }
                } else {
                    // Send ping to test connection
                    try {
                        ws.send(JSON.stringify({ type: 'ping' }));
                    } catch (error) {
                        console.error('Failed to send ping:', error);
                        updateConnectionStatus(false);
                    }
                }
            }, 5000); // Check every 5 seconds
        }
        
        // Test server connectivity
        async function testServerConnection() {
            try {
                const response = await fetch('/api/health', { 
                    method: 'GET',
                    timeout: 3000 
                });
                return response.ok;
            } catch (error) {
                console.error('Server health check failed:', error);
                return false;
            }
        }
        
        // Enhanced fetch with connection checking
        async function fetchWithConnectionCheck(url, options = {}) {
            try {
                const response = await fetch(url, {
                    ...options,
                    timeout: 10000
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                return response;
            } catch (error) {
                console.error('Fetch failed:', error);
                
                // Check if it's a network error
                if (error.name === 'TypeError' || error.message.includes('Failed to fetch')) {
                    updateConnectionStatus(false);
                }
                
                throw error;
            }
        }

        const auditChartCtx = document.getElementById('auditChart');
        if (auditChartCtx) {
            new Chart(auditChartCtx, {
                type: 'line',
                data: {
                    labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
                    datasets: [{
                        label: 'Actions per Day',
                        data: [12, 19, 3, 5, 2, 3, 20],
                        borderWidth: 1,
                        borderColor: 'rgb(114, 137, 218)',
                        backgroundColor: 'rgba(114, 137, 218, 0.1)'
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: '#40444b'
                            },
                            ticks: {
                                color: '#dcddde'
                            }
                        },
                        x: {
                            grid: {
                                color: '#40444b'
                            },
                            ticks: {
                                color: '#dcddde'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: '#dcddde'
                            }
                        }
                    }
                }
            });
        }

        // Section navigation
        function showSection(sectionName) {
            // Hide all sections
            document.querySelectorAll('.section').forEach(section => {
                section.style.display = 'none';
            });
            
            // Remove active class from all nav links
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });
            
            // Show target section
            const targetSection = document.getElementById(sectionName);
            if (targetSection) {
                targetSection.style.display = 'block';
            }
            
            // Add active class to clicked nav link
            const activeLink = document.querySelector(`[data-section="${sectionName}"]`);
            if (activeLink) {
                activeLink.classList.add('active');
            }
            
            // Load section-specific data
            if (sectionName === 'members') {
                initializeMemberView();
                loadMembersData();
            } else if (sectionName === 'logs') {
                // Load logs with current filters when switching to logs section
                loadAuditLogs(1, {});
            }
        }

        // Add click handlers for navigation
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('[data-section]').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const section = this.getAttribute('data-section');
                    showSection(section);
                });
            });

            // Add infinite scroll for members
            const membersTable = document.getElementById('table-view');
            const membersCards = document.getElementById('card-view');
            
            function checkScroll() {
                const container = currentView === 'table' ? membersTable : membersCards;
                if (!container || !hasMoreMembers || isLoading) return;
                
                const scrollPosition = window.innerHeight + window.scrollY;
                const threshold = document.body.offsetHeight - 1000;
                
                if (scrollPosition >= threshold) {
                    loadMembersData(currentPage + 1, true);
                }
            }
            
            window.addEventListener('scroll', checkScroll);

            // Add member filter handlers
            document.getElementById('member-search').addEventListener('input', function() {
                currentFilters.search = this.value;
                currentPage = 1;
                hasMoreMembers = true;
                loadMembersData(1, false);
            });

            document.getElementById('member-role-filter').addEventListener('change', function() {
                currentFilters.role = this.value;
                currentPage = 1;
                hasMoreMembers = true;
                loadMembersData(1, false);
            });

            document.getElementById('member-sort').addEventListener('change', function() {
                currentFilters.sort = this.value;
                currentPage = 1;
                hasMoreMembers = true;
                loadMembersData(1, false);
            });

            document.getElementById('refresh-members').addEventListener('click', function() {
                currentPage = 1;
                hasMoreMembers = true;
                loadMembersData(1, false);
            });

            // Add event listeners for filter functionality - with null checks
            const filterElements = [
                { id: 'filter-action', event: 'change', handler: () => { auditCurrentPage = 1; applyFilters(); } },
                { id: 'filter-category', event: 'change', handler: () => { auditCurrentPage = 1; applyFilters(); } },
                { id: 'filter-search', event: 'input', handler: debounce(() => { auditCurrentPage = 1; applyFilters(); }, 500) },
                { id: 'filter-start-date', event: 'change', handler: () => { auditCurrentPage = 1; applyFilters(); } },
                { id: 'filter-end-date', event: 'change', handler: () => { auditCurrentPage = 1; applyFilters(); } }
            ];

            filterElements.forEach(({ id, event, handler }) => {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener(event, handler);
                }
            });

            const clearFiltersButton = document.getElementById('clear-filters');
            if (clearFiltersButton) {
                clearFiltersButton.addEventListener('click', clearFilters);
            }

            // Pagination click handler - with null check
            const paginationElement = document.getElementById('pagination');
            if (paginationElement) {
                paginationElement.addEventListener('click', function(e) {
                    e.preventDefault();
                    if (e.target.tagName === 'A' && e.target.dataset.page) {
                        const page = parseInt(e.target.dataset.page);
                        if (!isNaN(page)) {
                            loadAuditPage(page);
                        }
                    }
                });
            }
            
            // Initialize WebSocket connection
            connectWebSocket();
            startConnectionHealthCheck();
            
            // Load initial data
            loadGuildRoles();
            initializeMemberView();
            loadMembersData();

            // Add save overview button handler
            const saveOverviewBtn = document.getElementById('saveOverviewBtn');
            if (saveOverviewBtn) {
                saveOverviewBtn.addEventListener('click', async function() {
                    const prefix = document.getElementById('prefix').value;
                    
                    try {
                        this.classList.add('loading');
                        const response = await fetch(`/api/dashboard/<%= guild.id %>/config`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ prefix })
                        });
                        
                        const result = await response.json();
                        if (result.success) {
                            showNotification('success', 'Settings Saved!', 'Configuration updated successfully');
                        } else {
                            showNotification('error', 'Save Failed', result.error || 'Failed to save settings');
                        }
                    } catch (error) {
                        showNotification('error', 'Network Error', 'Failed to save settings');
                    } finally {
                        this.classList.remove('loading');
                    }
                });
            }
            
            // Cleanup on page unload
            window.addEventListener('beforeunload', function() {
                if (connectionCheckInterval) {
                    clearInterval(connectionCheckInterval);
                }
                if (ws && ws.readyState === WebSocket.OPEN) {
                    ws.close();
                }
            });
        });

        // Debounce function for search input
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Member management functions
        let currentMemberId = '';
        let currentMemberUsername = '';
        let currentMemberAvatar = '';
        let guildRoles = []; // To store roles fetched from the server
        let currentMembers = []; // Store current members data
        let currentPage = 1;
        let isLoading = false;
        let hasMoreMembers = true;
        let currentFilters = {
            search: '',
            role: '',
            sort: 'newest'
        };

        // Load members data with pagination
        async function loadMembersData(page = 1, append = false) {
            if (isLoading) return;
            
            try {
                isLoading = true;
                const params = new URLSearchParams({
                    page: page,
                    search: currentFilters.search,
                    role: currentFilters.role,
                    sort: currentFilters.sort,
                    limit: 50
                });

                const response = await fetchWithConnectionCheck(`/api/dashboard/<%= guild.id %>/members?${params}`);
                const data = await response.json();
                
                if (append) {
                    currentMembers = [...currentMembers, ...(data.members || [])];
                } else {
                    currentMembers = data.members || [];
                }
                
                displayMembers(currentMembers);
                updateMemberCount(data.pagination?.totalMembers || 0);
                
                hasMoreMembers = data.pagination?.hasNext || false;
                currentPage = page;
                
            } catch (error) {
                console.error('Error loading members:', error);
                if (!append) {
                    document.getElementById('members-tbody').innerHTML = `
                        <tr><td colspan="5" class="text-center text-danger">Failed to load members</td></tr>
                    `;
                }
            } finally {
                isLoading = false;
            }
        }

        let currentView = 'table'; // Default to table view

        function toggleMemberView(viewType) {
            currentView = viewType;
            const tableView = document.getElementById('table-view');
            const cardView = document.getElementById('card-view');
            const tableBtn = document.getElementById('table-view-btn');
            const cardBtn = document.getElementById('card-view-btn');

            if (viewType === 'table') {
                tableView.style.display = 'block';
                cardView.style.display = 'none';
                tableBtn.classList.remove('btn-outline-primary');
                tableBtn.classList.add('btn-primary');
                cardBtn.classList.remove('btn-primary');
                cardBtn.classList.add('btn-outline-primary');
            } else {
                tableView.style.display = 'none';
                cardView.style.display = 'block';
                cardBtn.classList.remove('btn-outline-primary');
                cardBtn.classList.add('btn-primary');
                tableBtn.classList.remove('btn-primary');
                tableBtn.classList.add('btn-outline-primary');
            }

            // Redisplay members in the new view
            displayMembers(currentMembers);
        }

        // Initialize the default view on page load
        function initializeMemberView() {
            const tableView = document.getElementById('table-view');
            const cardView = document.getElementById('card-view');
            const tableBtn = document.getElementById('table-view-btn');
            const cardBtn = document.getElementById('card-view-btn');

            // Set table view as default
            tableView.style.display = 'block';
            cardView.style.display = 'none';
            tableBtn.classList.remove('btn-outline-primary');
            tableBtn.classList.add('btn-primary');
            cardBtn.classList.remove('btn-primary');
            cardBtn.classList.add('btn-outline-primary');
        }

        function displayMembers(members) {
            if (currentView === 'table') {
                displayMembersTable(members);
            } else {
                displayMembersCards(members);
            }
        }

        function displayMembersTable(members) {
            const tbody = document.getElementById('members-tbody');
            if (!tbody) return;

            if (members.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5" class="text-center">No members found</td></tr>';
                return;
            }

            tbody.innerHTML = members.map(member => `
                <tr>
                    <td>
                        <div class="d-flex align-items-center">
                            <img src="${member.avatar}" alt="${member.username}" 
                                 class="member-avatar rounded-circle me-2" 
                                 style="width: 32px; height: 32px; cursor: pointer; transition: transform 0.2s, border 0.2s; border: 2px solid transparent;"
                                 onclick="showModerationModal('${member.id}', '${member.username}', '${member.avatar}')"
                                 onmouseover="this.style.transform='scale(1.1)'; this.style.borderColor='#007bff';"
                                 onmouseout="this.style.transform='scale(1)'; this.style.borderColor='transparent';">
                            <div>
                                <div class="fw-bold">${member.username}</div>
                                <small class="text-muted">${member.id}</small>
                            </div>
                        </div>
                    </td>
                    <td>${member.nickname || '<em>None</em>'}</td>
                    <td>
                        ${member.roles.map(role => `
                            <span class="badge me-1" style="background-color: ${role.color || '#6c757d'}; font-size: 10px;">
                                ${role.name}
                            </span>
                        `).join('')}
                    </td>
                    <td>
                        <small>${member.joinedAt ? new Date(member.joinedAt).toLocaleDateString() : 'Unknown'}</small>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" 
                                onclick="showModerationModal('${member.id}', '${member.username}', '${member.avatar}')">
                            <i class="fas fa-cog"></i>
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        function displayMembersCards(members) {
            const cardsContainer = document.getElementById('members-cards');
            if (!cardsContainer) return;

            if (members.length === 0) {
                cardsContainer.innerHTML = '<div class="col-12 text-center">No members found</div>';
                return;
            }

            cardsContainer.innerHTML = members.map(member => `
                <div class="col-lg-4 col-md-6 mb-3">
                    <div class="card member-card h-100" onclick="showModerationModal('${member.id}', '${member.username}', '${member.avatar}')" style="cursor: pointer;">
                        <div class="card-body text-center">
                            <div class="mb-3">
                                <img src="${member.avatar}" alt="${member.username}" 
                                     class="member-avatar rounded-circle" 
                                     style="width: 64px; height: 64px; transition: transform 0.2s, border 0.2s; border: 2px solid transparent;"
                                     onmouseover="this.style.transform='scale(1.1)'; this.style.borderColor='#007bff';"
                                     onmouseout="this.style.transform='scale(1)'; this.style.borderColor='transparent';">
                            </div>
                            <h6 class="card-title mb-1">${member.username}</h6>
                            <p class="card-text text-muted small mb-2">${member.nickname || 'No nickname'}</p>
                            <div class="mb-2">
                                ${member.roles.slice(0, 3).map(role => `
                                    <span class="badge me-1" style="background-color: ${role.color || '#6c757d'}; font-size: 9px;">
                                        ${role.name}
                                    </span>
                                `).join('')}
                                ${member.roles.length > 3 ? `<span class="badge bg-secondary" style="font-size: 9px;">+${member.roles.length - 3}</span>` : ''}
                            </div>
                            <small class="text-muted">
                                Joined: ${member.joinedAt ? new Date(member.joinedAt).toLocaleDateString() : 'Unknown'}
                            </small>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function updateMemberCount(count) {
            const memberCountElement = document.getElementById('member-count');
            if (memberCountElement) {
                memberCountElement.textContent = `${count} Members`;
            }
        }

        // Audit log filtering
        let auditCurrentPage = 1;
        let auditCurrentFilters = {};

        async function loadAuditLogs(page = 1, filters = {}) {
            try {
                // Build query parameters
                const params = new URLSearchParams({
                    page: page.toString(),
                    limit: '50'
                });

                // Add filters to query parameters if they are not empty or default
                if (filters.action && filters.action !== '') {
                    params.append('action', filters.action);
                }
                if (filters.category && filters.category !== '') {
                    params.append('category', filters.category);
                }
                if (filters.search && filters.search !== '') {
                    params.append('search', filters.search);
                }
                if (filters.dateFrom && filters.dateFrom !== '') {
                    params.append('startDate', filters.dateFrom);
                }
                if (filters.dateTo && filters.dateTo !== '') {
                    params.append('endDate', filters.dateTo);
                }

                const response = await fetchWithConnectionCheck(`/api/dashboard/<%= guild.id %>/logs?${params.toString()}`);
                const data = await response.json();

                if (data.success && data.logs) {
                    displayAuditLogs(data.logs);
                    updateAuditPagination(data.pagination);
                    const logCountElement = document.getElementById('log-count');
                    if (logCountElement) {
                        const totalLogs = data.pagination.totalLogs || 0;
                        const currentShowing = Math.min(data.logs.length, 50);
                        logCountElement.textContent = `Showing ${currentShowing} of ${totalLogs} logs`;
                    }
                } else {
                    showNotification('error', 'Error', data.error || 'Failed to load audit logs');
                    const tbody = document.getElementById('audit-logs-tbody');
                    if(tbody) tbody.innerHTML = `<tr><td colspan="6" class="text-center text-muted"><i class="fas fa-exclamation-triangle"></i> Error loading logs.</td></tr>`;
                }
            } catch (error) {
                console.error('Error loading audit logs:', error);
                showNotification('error', 'Error', 'Failed to load audit logs');
                const tbody = document.getElementById('audit-logs-tbody');
                if(tbody) tbody.innerHTML = `<tr><td colspan="6" class="text-center text-muted"><i class="fas fa-exclamation-triangle"></i> Error loading logs.</td></tr>`;
            }
        }

        function displayAuditLogs(logs) {
            const tbody = document.getElementById('audit-logs-tbody');
            if (!tbody) {
                return;
            }

            tbody.innerHTML = ''; // Clear existing logs

            if (!logs || logs.length === 0) {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td colspan="6" class="text-center text-muted">
                        <i class="fas fa-info-circle"></i> No audit logs found for the selected filters.
                    </td>
                `;
                tbody.appendChild(row);
                return;
            }

            logs.forEach(log => {
                const categoryColor = log.category === 'MODERATION' ? 'danger' : 
                                     log.category === 'MEMBER' ? 'info' : 
                                     log.category === 'MESSAGE' ? 'warning' : 'secondary';

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${new Date(log.timestamp).toLocaleString()}</td>
                    <td><span class="badge bg-${categoryColor}">${log.category}</span></td>
                    <td><span class="badge bg-primary">${log.action}</span></td>
                    <td>${log.moderatorTag || 'System'}</td>
                    <td>${log.targetTag || '-'}</td>
                    <td>${log.reason || '-'}</td>
                `;
                tbody.appendChild(row);
            });
        }

        function updateAuditPagination(pagination) {
            const paginationContainer = document.getElementById('pagination-container');
            const paginationUl = document.getElementById('pagination');

            if (!pagination || pagination.totalPages <= 1) {
                if (paginationContainer) paginationContainer.style.display = 'none';
                return;
            }

            if (paginationContainer) paginationContainer.style.display = 'block';
            if (paginationUl) {
                paginationUl.innerHTML = '';

                // Previous button
                const prevLi = document.createElement('li');
                prevLi.className = `page-item ${pagination.currentPage === 1 ? 'disabled' : ''}`;
                prevLi.innerHTML = `<a class="page-link" href="#" data-page="${pagination.currentPage - 1}">Previous</a>`;
                paginationUl.appendChild(prevLi);

                // Page numbers
                const startPage = Math.max(1, pagination.currentPage - 2);
                const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);

                for (let i = startPage; i <= endPage; i++) {
                    const li = document.createElement('li');
                    li.className = `page-item ${i === pagination.currentPage ? 'active' : ''}`;
                    li.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                    paginationUl.appendChild(li);
                }

                // Next button
                const nextLi = document.createElement('li');
                nextLi.className = `page-item ${pagination.currentPage === pagination.totalPages ? 'disabled' : ''}`;
                nextLi.innerHTML = `<a class="page-link" href="#" data-page="${pagination.currentPage + 1}">Next</a>`;
                paginationUl.appendChild(nextLi);
            }
        }

        function loadAuditPage(page) {
            auditCurrentPage = page;
            loadAuditLogs(auditCurrentPage, auditCurrentFilters);
        }

        function applyFilters() {
            const filters = {
                action: document.getElementById('filter-action') ? document.getElementById('filter-action').value : '',
                category: document.getElementById('filter-category') ? document.getElementById('filter-category').value : '',
                search: document.getElementById('filter-search') ? document.getElementById('filter-search').value : '',
                dateFrom: document.getElementById('filter-start-date') ? document.getElementById('filter-start-date').value : '',
                dateTo: document.getElementById('filter-end-date') ? document.getElementById('filter-end-date').value : ''
            };

            auditCurrentFilters = filters;
            auditCurrentPage = 1;
            loadAuditLogs(auditCurrentPage, auditCurrentFilters);
        }

        function clearFilters() {
            if (document.getElementById('filter-action')) document.getElementById('filter-action').value = '';
            if (document.getElementById('filter-category')) document.getElementById('filter-category').value = '';
            if (document.getElementById('filter-search')) document.getElementById('filter-search').value = '';
            if (document.getElementById('filter-start-date')) document.getElementById('filter-start-date').value = '';
            if (document.getElementById('filter-end-date')) document.getElementById('filter-end-date').value = '';

            auditCurrentFilters = {};
            auditCurrentPage = 1;
            loadAuditLogs(auditCurrentPage, auditCurrentFilters);
        }

        // Fetch guild roles when the page loads
        async function loadGuildRoles() {
            try {
                const response = await fetchWithConnectionCheck(`/api/dashboard/<%= guild.id %>/roles`);
                const data = await response.json();
                guildRoles = data.roles || [];

                // Populate role filter dropdown
                const roleFilterSelect = document.getElementById('member-role-filter');
                if (roleFilterSelect) {
                    roleFilterSelect.innerHTML = '<option value="">All Roles</option>' + 
                        guildRoles.map(role => `
                            <option value="${role.id}">${role.name}</option>
                        `).join('');
                }

                // Populate role checkboxes in the role management modal
                const roleListDiv = document.getElementById('roleList');
                if (roleListDiv) {
                    roleListDiv.innerHTML = guildRoles.map(role => `
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="checkbox" id="role_${role.id}" value="${role.id}">
                            <label class="form-check-label" for="role_${role.id}">
                                ${role.name}
                            </label>
                        </div>
                    `).join('');
                }
            } catch (error) {
                console.error('Error loading guild roles:', error);
                showNotification('error', 'Error', 'Could not load guild roles.');
            }
        }

        function showNotification(type, title, message, duration = 5000) {
            const container = document.getElementById('notificationContainer');
            if (!container) return;

            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.style.cssText = `
                background: linear-gradient(135deg, #2f3136, #36393f);
                border: 1px solid;
                border-radius: 12px;
                padding: 16px 20px;
                margin-bottom: 10px;
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
                backdrop-filter: blur(10px);
                opacity: 0;
                transform: translateX(100%);
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                position: relative;
                overflow: hidden;
                color: #dcddde;
            `;

            let borderColor = '#7289da';
            let iconName = 'info-circle';
            if (type === 'success') { borderColor = '#00d26a'; iconName = 'check-circle'; }
            else if (type === 'error') { borderColor = '#ff6b6b'; iconName = 'exclamation-triangle'; }
            else if (type === 'warning') { borderColor = '#ffa500'; iconName = 'exclamation-circle'; }

            notification.style.borderColor = borderColor;

            notification.innerHTML = `
                <div style="display: flex; align-items: center; gap: 12px;">
                    <div style="font-size: 24px; color: ${borderColor};">
                        <i class="fas fa-${iconName}"></i>
                    </div>
                    <div style="flex: 1;">
                        <div style="font-weight: 600; font-size: 16px; margin-bottom: 2px;">${title}</div>
                        <div style="font-size: 14px; opacity: 0.9;">${message}</div>
                    </div>
                    <button onclick="removeNotification(this.parentElement.parentElement)" style="background: none; border: none; color: #dcddde; opacity: 0.7; cursor: pointer; padding: 4px; border-radius: 4px; transition: all 0.2s ease;">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;

            container.appendChild(notification);

            setTimeout(() => {
                notification.style.opacity = '1';
                notification.style.transform = 'translateX(0)';
            }, 100);

            if (type !== 'error') {
                setTimeout(() => removeNotification(notification), duration);
            }
        }

        function removeNotification(notification) {
            notification.style.transform = 'translateX(100%)';
            notification.style.opacity = '0';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 400);
        }

        function showModerationModal(memberId, username, avatar) {
            currentMemberId = memberId;
            currentMemberUsername = username;
            currentMemberAvatar = avatar;
            document.getElementById('modalMemberName').textContent = username;
            document.getElementById('modalMemberId').textContent = memberId;
            document.getElementById('moderationModal').style.display = 'block';
        }

        function closeModerationModal() {
            document.getElementById('moderationModal').style.display = 'none';
            document.getElementById('moderationReason').value = '';
        }

        function showRoleManagementModal() {
            closeModerationModal();
            document.getElementById('roleModalMemberName').textContent = currentMemberUsername;
            
            // Reset checkboxes and set based on current roles (need to fetch this info or pass it)
            const member = currentMembers.find(m => m.id === currentMemberId);
            if (member) {
                 const checkboxes = document.querySelectorAll('#roleManagementModal .form-check-input');
                 checkboxes.forEach(checkbox => {
                     checkbox.checked = member.roles.some(role => role.id === checkbox.value);
                 });
            }

            document.getElementById('roleManagementModal').style.display = 'block';
        }

        function closeRoleManagementModal() {
            document.getElementById('roleManagementModal').style.display = 'none';
        }

        async function updateMemberRoles() {
            const roleIdsToAdd = [];
            const roleIdsToRemove = [];
            const checkboxes = document.querySelectorAll('#roleManagementModal .form-check-input');

            checkboxes.forEach(checkbox => {
                if (checkbox.checked) {
                    roleIdsToAdd.push(checkbox.value);
                } else {
                    // Check if the role was previously assigned to remove it
                    // This requires knowing the member's current roles, which we might need to fetch or store
                    // For now, let's assume we're just adding roles if checked and the backend handles removal if unchecked.
                    // A more robust solution would involve comparing current state with new state.
                    // For simplicity, we'll send both add and remove.
                    // Let's refine this: we need to know the member's current roles.
                    // For now, let's just try adding.
                }
            });

            // Let's refetch current member roles to determine what to remove
            const member = currentMembers.find(m => m.id === currentMemberId);
            if (!member) {
                showNotification('error', 'Error', 'Member not found.');
                return;
            }
            const currentRoleIds = member.roles.map(r => r.id);

            roleIdsToAdd.forEach(roleId => {
                if (!currentRoleIds.includes(roleId)) {
                    // This role needs to be added
                }
            });

            currentRoleIds.forEach(roleId => {
                if (!roleIdsToAdd.includes(roleId)) {
                    roleIdsToRemove.push(roleId); // This role needs to be removed
                }
            });


            try {
                showNotification('info', 'Updating Roles...', 'Applying role changes.');

                const response = await fetch(`/api/dashboard/<%= guild.id %>/member/${currentMemberId}/roles`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ add: roleIdsToAdd, remove: roleIdsToRemove })
                });

                const result = await response.json();
                if (result.success) {
                    showNotification('success', 'Roles Updated!', result.message, 4000);
                    setTimeout(() => location.reload(), 1000); // Reload to reflect changes
                } else {
                    showNotification('error', 'Role Update Failed', result.error || 'An error occurred.');
                }
            } catch (error) {
                showNotification('error', 'Network Error', 'Failed to update roles due to connection issues.');
            }
            closeRoleManagementModal();
        }

        async function changeNicknameFromModal() {
            const newNickname = prompt(`Enter new nickname for ${currentMemberUsername}:`, currentMemberUsername);
            if (newNickname === null) return; // User cancelled

            const trimmedNickname = newNickname.trim();

            try {
                showNotification('info', 'Updating Nickname...', 'Please wait while we update the nickname.');

                const response = await fetch(`/api/dashboard/<%= guild.id %>/member/${currentMemberId}/nickname`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ nickname: trimmedNickname })
                });

                const result = await response.json();
                if (result.success) {
                    showNotification('success', 'Nickname Updated!', `Successfully changed nickname to "${trimmedNickname || 'None'}"`, 4000);
                    setTimeout(() => location.reload(), 1000); // Reload to reflect changes
                    closeModerationModal();
                } else {
                    showNotification('error', 'Update Failed', result.error || 'Failed to update nickname');
                }
            } catch (error) {
                showNotification('error', 'Network Error', 'Failed to change nickname due to connection issues');
            }
        }

        async function submitKickBanAction(action) {
            const reason = document.getElementById('moderationReason').value.trim();
            let deleteMessages = false;

            if (action === 'ban') {
                deleteMessages = confirm('Delete messages from the last 7 days for ban?');
            }

            try {
                showNotification('info', `Submitting ${action.charAt(0).toUpperCase() + action.slice(1)} Request...`, `Your ${action} request has been sent.`);
                
                let url = `/api/dashboard/<%= guild.id %>/member/${currentMemberId}/${action}-request`;
                let method = 'POST';
                let body = JSON.stringify({ reason });
                if (action === 'ban') {
                    body = JSON.stringify({ reason, deleteMessages });
                }

                const response = await fetch(url, {
                    method: method,
                    headers: { 'Content-Type': 'application/json' },
                    body: body
                });
                const result = await response.json();

                if (result.success) {
                    showNotification('success', `${action.charAt(0).toUpperCase() + action.slice(1)} Request Submitted!`, result.message, 4000);
                    setTimeout(() => location.reload(), 1000); // Reload to reflect changes
                } else {
                    showNotification('error', 'Request Failed', result.error || `Failed to submit ${action} request`);
                }
            } catch (error) {
                showNotification('error', 'Network Error', `Failed to submit ${action} request due to connection issues.`);
            }
            closeModerationModal();
        }
    </script>
</script>
</body>
</html>