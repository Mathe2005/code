<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= guild.name %> - Members Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body { 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            min-height: 100vh;
        }
        .container-fluid { padding-top: 20px; }
        .card { 
            background: rgba(255, 255, 255, 0.95); 
            border: none; 
            border-radius: 15px; 
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        .member-card {
            border: 1px solid #dee2e6;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            background: white;
        }
        .member-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
        }
        .role-badge {
            font-size: 0.75rem;
            margin-right: 5px;
            margin-bottom: 5px;
            border: 1px solid rgba(0,0,0,0.1);
        }
        
        /* Helper function for text color based on background */
        .role-badge.light-bg {
            color: #000000 !important;
        }
        
        .role-badge.dark-bg {
            color: #ffffff !important;
        }
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-left: 5px;
        }
        .status-online { background-color: #28a745; }
        .status-idle { background-color: #ffc107; }
        .status-dnd { background-color: #dc3545; }
        .status-offline { background-color: #6c757d; }
        .btn-action {
            margin: 2px;
            padding: 5px 10px;
            font-size: 0.8rem;
        }

        /* Enhanced notification styles */
        .notification-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            max-width: 400px;
        }

        .notification {
            background: linear-gradient(135deg, #2f3136, #36393f);
            border: 1px solid;
            border-radius: 12px;
            padding: 16px 20px;
            margin-bottom: 10px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(10px);
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .notification.show {
            opacity: 1;
            transform: translateX(0);
        }

        .notification.success {
            border-color: #00d26a;
            background: linear-gradient(135deg, rgba(0, 210, 106, 0.1), rgba(0, 210, 106, 0.05));
        }

        .notification.error {
            border-color: #ff6b6b;
            background: linear-gradient(135deg, rgba(255, 107, 107, 0.1), rgba(255, 107, 107, 0.05));
        }

        .notification.info {
            border-color: #7289da;
            background: linear-gradient(135deg, rgba(114, 137, 218, 0.1), rgba(114, 137, 218, 0.05));
        }

        .notification.warning {
            border-color: #ffa500;
            background: linear-gradient(135deg, rgba(255, 165, 0, 0.1), rgba(255, 165, 0, 0.05));
        }

        .notification-content {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .notification-icon {
            font-size: 24px;
            flex-shrink: 0;
        }

        .notification.success .notification-icon {
            color: #00d26a;
        }

        .notification.error .notification-icon {
            color: #ff6b6b;
        }

        .notification.info .notification-icon {
            color: #7289da;
        }

        .notification.warning .notification-icon {
            color: #ffa500;
        }

        .notification-text {
            flex: 1;
        }

        .notification-title {
            font-weight: 600;
            font-size: 16px;
            margin-bottom: 2px;
        }

        .notification-message {
            font-size: 14px;
            opacity: 0.9;
        }

        .notification-close {
            background: none;
            border: none;
            color: #dcddde;
            opacity: 0.7;
            cursor: pointer;
            padding: 4px;
            border-radius: 4px;
            transition: all 0.2s ease;
            flex-shrink: 0;
        }

        .notification-close:hover {
            opacity: 1;
            background-color: rgba(255, 255, 255, 0.1);
        }

        .notification-progress {
            position: absolute;
            bottom: 0;
            left: 0;
            height: 3px;
            background: linear-gradient(90deg, transparent, currentColor, transparent);
            transition: width 0.1s linear;
        }

        .notification.success .notification-progress {
            background: linear-gradient(90deg, transparent, #00d26a, transparent);
        }

        .notification.error .notification-progress {
            background: linear-gradient(90deg, transparent, #ff6b6b, transparent);
        }

        .notification.info .notification-progress {
            background: linear-gradient(90deg, transparent, #7289da, transparent);
        }

        .notification.warning .notification-progress {
            background: linear-gradient(90deg, transparent, #ffa500, transparent);
        }

        /* Breadcrumb styles */
        .breadcrumb {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 0.9em;
        }

        .breadcrumb-item {
            color: #b3b3b3;
            text-decoration: none;
            transition: color 0.2s;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .breadcrumb-item:hover {
            color: #7289da;
        }

        .breadcrumb-separator {
            color: #666;
            font-weight: bold;
        }

        .breadcrumb-current {
            color: #ffffff;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 5px;
        }
    </style>
</head>
<body>
    <!-- Notification Container -->
    <div class="notification-container" id="notificationContainer"></div>

    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        
            <nav class="breadcrumb">
                <a href="/dashboard" class="breadcrumb-item">
                    <i class="fas fa-home"></i>
                    Dashboard
                </a>
                <span class="breadcrumb-separator">/</span>
                <a href="/dashboard/<%= guild.id %>" class="breadcrumb-item">
                    <%= guild.name %>
                </a>
                <span class="breadcrumb-separator">/</span>
                <span class="breadcrumb-current">
                    <i class="fas fa-users"></i>
                    Members (<%= pagination.filteredMembers || pagination.totalMembers %> 
                    <% if (filters.search || filters.role) { %>
                        of <%= guild.totalMembers %>
                    <% } %>
                    )
                </span>
            </nav></div>
    </div>
                    <div class="card-body">
                        <!-- Filters -->
                        <div class="row mb-4">
                            <div class="col-md-4">
                                <label for="searchFilter" class="form-label">Search Members</label>
                                <input type="text" class="form-control" id="searchFilter" 
                                       placeholder="Search by username or nickname..." 
                                       value="<%= filters.search %>">
                            </div>
                            <div class="col-md-3">
                                <label for="roleFilter" class="form-label">Filter by Role</label>
                                <select class="form-select" id="roleFilter">
                                    <option value="">All Roles</option>
                                    <% guild.roles.forEach(role => { %>
                                        <option value="<%= role.id %>" 
                                                <%= filters.role === role.id ? 'selected' : '' %>>
                                            <%= role.name %>
                                        </option>
                                    <% }); %>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="sortFilter" class="form-label">Sort By</label>
                                <select class="form-select" id="sortFilter">
                                    <option value="newest" <%= filters.sort === 'newest' ? 'selected' : '' %>>Newest Members</option>
                                    <option value="oldest" <%= filters.sort === 'oldest' ? 'selected' : '' %>>Oldest Members</option>
                                    <option value="username" <%= filters.sort === 'username' ? 'selected' : '' %>>Username A-Z</option>
                                </select>
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button class="btn btn-primary w-100" onclick="applyFilters()">
                                    <i class="fas fa-filter"></i> Apply
                                </button>
                            </div>
                        </div>

                        <!-- Members List -->
                        <div class="members-container">
                            <% members.forEach(member => { %>
                                <div class="member-card">
                                    <div class="row align-items-center">
                                        <div class="col-md-2">
                                            <img src="<%= member.avatar %>" alt="Avatar" class="member-avatar">
                                            <span class="status-indicator status-<%= member.status %>"></span>
                                        </div>
                                        <div class="col-md-3">
                                            <h6 class="mb-1"><%= member.username %></h6>
                                            <% if (member.nickname) { %>
                                                <small class="text-muted">Nick: <%= member.nickname %></small>
                                            <% } %>
                                            <br>
                                            <small class="text-muted">Joined: <%= new Date(member.joinedAt).toLocaleDateString() %></small>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="roles-container">
                                                <% member.roles.forEach(role => { 
                                                    let bgColor = role.color || '#6c757d';
                                                    
                                                    // Handle cases where role.color might be a number
                                                    if (typeof bgColor === 'number') {
                                                        bgColor = '#' + bgColor.toString(16).padStart(6, '0');
                                                    }
                                                    
                                                    // Ensure bgColor starts with #
                                                    if (!bgColor.startsWith('#')) {
                                                        bgColor = '#' + bgColor;
                                                    }
                                                    
                                                    // Convert hex to RGB for brightness calculation
                                                    const hex = bgColor.replace('#', '');
                                                    const r = parseInt(hex.substr(0, 2), 16) || 0;
                                                    const g = parseInt(hex.substr(2, 2), 16) || 0;
                                                    const b = parseInt(hex.substr(4, 2), 16) || 0;
                                                    
                                                    // Calculate relative luminance using WCAG formula
                                                    const getLuminance = (r, g, b) => {
                                                        const [rs, gs, bs] = [r, g, b].map(c => {
                                                            c = c / 255;
                                                            return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
                                                        });
                                                        return 0.2126 * rs + 0.7152 * gs + 0.0722 * bs;
                                                    };
                                                    
                                                    const luminance = getLuminance(r, g, b);
                                                    
                                                    // Use dark text for light backgrounds (luminance > 0.5), white text for dark backgrounds
                                                    const textColor = luminance > 0.5 ? '#000000' : '#ffffff';
                                                    const borderColor = luminance > 0.5 ? 'rgba(0,0,0,0.2)' : 'rgba(255,255,255,0.2)';
                                                    const textShadow = luminance > 0.5 ? '0 1px 2px rgba(255,255,255,0.8)' : '0 1px 2px rgba(0,0,0,0.8)';
                                                %>
                                                    <span class="badge role-badge" 
                                                          style="background-color: <%= bgColor %>; color: <%= textColor %>; border: 1px solid <%= borderColor %>; text-shadow: <%= textShadow %>; font-weight: 600;">
                                                        <%= role.name %>
                                                    </span>
                                                <% }); %>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="btn-group-vertical w-100">
                                                <div class="dropdown">
                                                    <button class="btn btn-sm btn-primary dropdown-toggle btn-action" 
                                                            type="button" data-bs-toggle="dropdown">
                                                        <i class="fas fa-user-tag"></i> Manage Roles
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        <% guild.roles.forEach(role => { %>
                                                            <li>
                                                                <% const hasRole = member.roles.some(r => r.id === role.id); %>
                                                                <a class="dropdown-item" 
                                                                   onclick="manageRole('<%= member.id %>', '<%= role.id %>', '<%= hasRole ? 'remove' : 'add' %>')">
                                                                    <i class="fas fa-<%= hasRole ? 'minus' : 'plus' %>"></i>
                                                                    <%= hasRole ? 'Remove' : 'Add' %> <%= role.name %>
                                                                </a>
                                                            </li>
                                                        <% }); %>
                                                    </ul>
                                                </div>
                                                <button class="btn btn-sm btn-warning btn-action" 
                                                        onclick="changeNickname('<%= member.id %>', '<%= member.username %>', '<%= member.nickname || '' %>')">
                                                    <i class="fas fa-signature"></i> Change Nickname
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        </div>

                        <!-- Pagination -->
                        <% if (pagination.total > 1) { %>
                            <nav aria-label="Members pagination">
                                <ul class="pagination justify-content-center">
                                    <% if (pagination.hasPrev) { %>
                                        <li class="page-item">
                                            <a class="page-link" href="?page=<%= pagination.current - 1 %>&search=<%= filters.search %>&role=<%= filters.role %>&sort=<%= filters.sort %>">Previous</a>
                                        </li>
                                    <% } %>

                                    <% for (let i = Math.max(1, pagination.current - 2); i <= Math.min(pagination.total, pagination.current + 2); i++) { %>
                                        <li class="page-item <%= i === pagination.current ? 'active' : '' %>">
                                            <a class="page-link" href="?page=<%= i %>&search=<%= filters.search %>&role=<%= filters.role %>&sort=<%= filters.sort %>"><%= i %></a>
                                        </li>
                                    <% } %>

                                    <% if (pagination.hasNext) { %>
                                        <li class="page-item">
                                            <a class="page-link" href="?page=<%= pagination.current + 1 %>&search=<%= filters.search %>&role=<%= filters.role %>&sort=<%= filters.sort %>">Next</a>
                                        </li>
                                    <% } %>
                                </ul>
                            </nav>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // WebSocket connection for real-time updates
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const ws = new WebSocket(`${protocol}//${window.location.host}`);

        ws.onopen = function() {
            console.log('WebSocket connected');
            ws.send(JSON.stringify({
                type: 'subscribe',
                guildId: '<%= guild.id %>'
            }));
        };

        ws.onmessage = function(event) {
            const data = JSON.parse(event.data);
            if (data.type === 'audit_log' && data.data.guildId === '<%= guild.id %>') {
                console.log('Real-time audit log update:', data.data);
                // Optionally refresh member data if needed
                if (['ROLE_ADD', 'ROLE_REMOVE', 'NICKNAME_CHANGE'].includes(data.data.action)) {
                    // You could refresh the current page or update specific member info
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                }
            }
        };

        ws.onclose = function() {
            console.log('WebSocket disconnected');
        };

        function showNotification(type, title, message, duration = 5000) {
            const container = document.getElementById('notificationContainer');
            if (!container) return;

            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;

            let icon = 'info-circle';
            if (type === 'success') icon = 'check-circle';
            else if (type === 'error') icon = 'exclamation-triangle';
            else if (type === 'warning') icon = 'exclamation-circle';
            else if (type === 'info') icon = 'info-circle';

            notification.innerHTML = `
                <div class="notification-content">
                    <div class="notification-icon">
                        <i class="fas fa-${icon}"></i>
                    </div>
                    <div class="notification-text">
                        <div class="notification-title">${title}</div>
                        <div class="notification-message">${message}</div>
                    </div>
                    <button class="notification-close" onclick="removeNotification(this.parentElement.parentElement)">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="notification-progress" style="width: 100%"></div>
            `;

            container.appendChild(notification);

            // Animate in
            setTimeout(() => {
                notification.classList.add('show');
            }, 100);

            // Auto-remove after duration (except for errors which stay longer)
            if (type !== 'error') {
                const progressBar = notification.querySelector('.notification-progress');
                let width = 100;
                const interval = setInterval(() => {
                    width -= (100 / (duration / 100));
                    progressBar.style.width = width + '%';
                    if (width <= 0) {
                        clearInterval(interval);
                        removeNotification(notification);
                    }
                }, 100);
            }
        }

        function removeNotification(notification) {
            notification.style.transform = 'translateX(100%)';
            notification.style.opacity = '0';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 400);
        }</script>

    <script>
        function applyFilters() {
            const search = document.getElementById('searchFilter').value;
            const role = document.getElementById('roleFilter').value;
            const sort = document.getElementById('sortFilter').value;

            const params = new URLSearchParams();
            if (search) params.append('search', search);
            if (role) params.append('role', role);
            if (sort) params.append('sort', sort);

            window.location.href = window.location.pathname + '?' + params.toString();
        }

        async function manageRole(memberId, roleId, action) {
            try {
                showNotification('info', `${action === 'add' ? 'Adding' : 'Removing'} Role...`, 'Please wait while we update the member\'s roles.');

                const response = await fetch(`/api/dashboard/<%= guild.id %>/member/${memberId}/role`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ roleId, action })
                });

                const result = await response.json();
                if (result.success) {
                    showNotification('success', 'Role Updated!', result.message, 4000);
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showNotification('error', 'Update Failed', result.error || 'Failed to update role');
                }
            } catch (error) {
                showNotification('error', 'Network Error', 'Failed to manage role due to connection issues');
            }
        }

        async function changeNickname(memberId, username, currentNickname) {
            const newNickname = prompt(`Enter new nickname for ${username}:`, currentNickname || username);

            if (newNickname === null) return; // User cancelled

            try {
                showNotification('info', 'Updating Nickname...', 'Please wait while we update the nickname.');

                const response = await fetch(`/api/dashboard/<%= guild.id %>/member/${memberId}/nickname`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ nickname: newNickname.trim() })
                });

                const result = await response.json();
                if (result.success) {
                    showNotification('success', 'Nickname Updated!', `Successfully changed nickname to "${newNickname.trim() || 'None'}"`, 4000);
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showNotification('error', 'Update Failed', result.error || 'Failed to update nickname');
                }
            } catch (error) {
                showNotification('error', 'Network Error', 'Failed to change nickname due to connection issues');
            }
        }

        // Allow Enter key to apply filters
        document.getElementById('searchFilter').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                applyFilters();
            }
        });
    </script>
</body>
</html>