<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= guild.name %> - Members Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body { 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            min-height: 100vh;
        }
        .container-fluid { padding-top: 20px; }
        .card { 
            background: rgba(255, 255, 255, 0.95); 
            border: none; 
            border-radius: 15px; 
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        .member-card {
            border: 1px solid #dee2e6;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            background: white;
        }
        .member-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
        }
        .role-badge {
            font-size: 0.75rem;
            margin-right: 5px;
            margin-bottom: 5px;
            border: 1px solid rgba(0,0,0,0.1);
        }

        /* Helper function for text color based on background */
        .role-badge.light-bg {
            color: #000000 !important;
        }

        .role-badge.dark-bg {
            color: #ffffff !important;
        }
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-left: 5px;
        }
        .status-online { background-color: #28a745; }
        .status-idle { background-color: #ffc107; }
        .status-dnd { background-color: #dc3545; }
        .status-offline { background-color: #6c757d; }
        .btn-action {
            margin: 2px;
            padding: 5px 10px;
            font-size: 0.8rem;
        }

        /* Enhanced notification styles */
        .notification-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            max-width: 400px;
        }

        .notification {
            background: linear-gradient(135deg, #2f3136, #36393f);
            border: 1px solid;
            border-radius: 12px;
            padding: 16px 20px;
            margin-bottom: 10px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(10px);
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .notification.show {
            opacity: 1;
            transform: translateX(0);
        }

        .notification.success {
            border-color: #00d26a;
            background: linear-gradient(135deg, rgba(0, 210, 106, 0.1), rgba(0, 210, 106, 0.05));
        }

        .notification.error {
            border-color: #ff6b6b;
            background: linear-gradient(135deg, rgba(255, 107, 107, 0.1), rgba(255, 107, 107, 0.05));
        }

        .notification.info {
            border-color: #7289da;
            background: linear-gradient(135deg, rgba(114, 137, 218, 0.1), rgba(114, 137, 218, 0.05));
        }

        .notification.warning {
            border-color: #ffa500;
            background: linear-gradient(135deg, rgba(255, 165, 0, 0.1), rgba(255, 165, 0, 0.05));
        }

        .notification-content {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .notification-icon {
            font-size: 24px;
            flex-shrink: 0;
        }

        .notification.success .notification-icon {
            color: #00d26a;
        }

        .notification.error .notification-icon {
            color: #ff6b6b;
        }

        .notification.info .notification-icon {
            color: #7289da;
        }

        .notification.warning .notification-icon {
            color: #ffa500;
        }

        .notification-text {
            flex: 1;
        }

        .notification-title {
            font-weight: 600;
            font-size: 16px;
            margin-bottom: 2px;
        }

        .notification-message {
            font-size: 14px;
            opacity: 0.9;
        }

        .notification-close {
            background: none;
            border: none;
            color: #dcddde;
            opacity: 0.7;
            cursor: pointer;
            padding: 4px;
            border-radius: 4px;
            transition: all 0.2s ease;
            flex-shrink: 0;
        }

        .notification-close:hover {
            opacity: 1;
            background-color: rgba(255, 255, 255, 0.1);
        }

        .notification-progress {
            position: absolute;
            bottom: 0;
            left: 0;
            height: 3px;
            background: linear-gradient(90deg, transparent, currentColor, transparent);
            transition: width 0.1s linear;
        }

        .notification.success .notification-progress {
            background: linear-gradient(90deg, transparent, #00d26a, transparent);
        }

        .notification.error .notification-progress {
            background: linear-gradient(90deg, transparent, #ff6b6b, transparent);
        }

        .notification.info .notification-progress {
            background: linear-gradient(90deg, transparent, #7289da, transparent);
        }

        .notification.warning .notification-progress {
            background: linear-gradient(90deg, transparent, #ffa500, transparent);
        }

        /* Breadcrumb styles */
        .breadcrumb {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 0.9em;
        }

        .breadcrumb-item {
            color: #b3b3b3;
            text-decoration: none;
            transition: color 0.2s;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .breadcrumb-item:hover {
            color: #7289da;
        }

        .breadcrumb-separator {
            color: #666;
            font-weight: bold;
        }

        .breadcrumb-current {
            color: #ffffff;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        /* Modal styles for moderation actions */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1050; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0,0,0,0.6); /* Black w/ opacity */
            backdrop-filter: blur(5px);
        }
        .modal-content {
            background-color: #2f3136;
            margin: 10% auto; /* 10% from the top and centered */
            padding: 30px;
            border: 1px solid #4a4a4a;
            border-radius: 8px;
            width: 80%; /* Could be more or less, depending on screen size */
            max-width: 500px;
            color: #ffffff;
            box-shadow: 0 15px 35px rgba(0,0,0,0.5);
        }
        .modal-header {
            border-bottom: 1px solid #4a4a4a;
            padding-bottom: 15px;
            margin-bottom: 20px;
        }
        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
        }
        .modal-close-button {
            background: none;
            border: none;
            color: #dcddde;
            opacity: 0.7;
            cursor: pointer;
            font-size: 1.75rem;
            line-height: 1;
            padding: 0;
        }
        .modal-close-button:hover {
            opacity: 1;
        }
        .modal-body {
            margin-bottom: 20px;
        }
        .modal-body label {
            font-weight: 500;
            margin-bottom: 8px;
            display: block;
        }
        .modal-body input[type="text"],
        .modal-body input[type="number"],
        .modal-body textarea {
            background-color: #202225;
            border: 1px solid #4a4a4a;
            color: #ffffff;
            padding: 10px;
            border-radius: 4px;
            width: 100%;
            margin-bottom: 15px;
        }
        .modal-body textarea {
            resize: vertical;
            min-height: 80px;
        }
        .modal-footer {
            border-top: 1px solid #4a4a4a;
            padding-top: 15px;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        .modal-footer .btn {
            padding: 10px 20px;
            font-weight: 500;
        }
        .modal-footer .btn-secondary {
            background-color: #4a4a4a;
            border: none;
        }
        .modal-footer .btn-danger {
            background-color: #f04747;
            border: none;
        }
        .modal-footer .btn-danger:hover {
            background-color: #d33a3a;
        }

        .moderation-popup {
            position: absolute;
            background-color: #2f3136;
            border: 1px solid #4a4a4a;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.5);
            z-index: 1000;
            min-width: 180px;
            display: none; /* Initially hidden */
            color: #ffffff;
        }

        .moderation-popup .popup-item {
            padding: 8px 12px;
            cursor: pointer;
            border-radius: 4px;
            transition: background-color 0.2s ease;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .moderation-popup .popup-item:hover {
            background-color: #4a4a4a;
        }
        .moderation-popup .popup-item i {
            width: 20px; /* Fixed width for icon alignment */
            text-align: center;
        }
    </style>
</head>
<body>
    <!-- Notification Container -->
    <div class="notification-container" id="notificationContainer"></div>

    <!-- Moderation Modal -->
    <div class="modal" id="moderationModal">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalMemberName"></h5>
                <button type="button" class="modal-close-button" onclick="closeModerationModal()">
                    &times;
                </button>
            </div>
            <div class="modal-body">
                <p>Member ID: <span id="modalMemberId"></span></p>
                <label for="moderationReason">Reason:</label>
                <textarea id="moderationReason" rows="3" placeholder="Optional reason for action"></textarea>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <button class="btn btn-sm btn-primary" onclick="showRoleManagementModal()">
                        <i class="fas fa-user-tag"></i> Manage Roles
                    </button>
                    <button class="btn btn-sm btn-warning" onclick="changeNicknameFromModal()">
                        <i class="fas fa-signature"></i> Change Nickname
                    </button>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeModerationModal()">Cancel</button>
                <button class="btn btn-danger" onclick="submitKickBanAction('kick')">Kick</button>
                <button class="btn btn-danger" onclick="submitKickBanAction('ban')">Ban</button>
            </div>
        </div>
    </div>

    <!-- Role Management Modal -->
    <div class="modal" id="roleManagementModal">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="roleModalMemberName"></h5>
                <button type="button" class="modal-close-button" onclick="closeRoleManagementModal()">
                    &times;
                </button>
            </div>
            <div class="modal-body">
                <p>Add/Remove Roles:</p>
                <div id="roleList">
                    <% guild.roles.forEach(role => { %>
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="checkbox" id="role_<%= role.id %>" value="<%= role.id %>">
                            <label class="form-check-label" for="role_<%= role.id %>">
                                <%= role.name %>
                            </label>
                        </div>
                    <% }); %>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeRoleManagementModal()">Close</button>
                <button class="btn btn-primary" onclick="updateMemberRoles()">Save Changes</button>
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">

            <nav class="breadcrumb">
                <a href="/dashboard" class="breadcrumb-item">
                    <i class="fas fa-home"></i>
                    Dashboard
                </a>
                <span class="breadcrumb-separator">/</span>
                <a href="/dashboard/<%= guild.id %>" class="breadcrumb-item">
                    <%= guild.name %>
                </a>
                <span class="breadcrumb-separator">/</span>
                <span class="breadcrumb-current">
                    <i class="fas fa-users"></i>
                    Members (<%= pagination.totalMembers %>)
                </span>
            </nav></div>
    </div>
                    <div class="card-body">
                        <!-- Filters -->
                        <div class="row mb-4">
                            <div class="col-md-4">
                                <label for="searchFilter" class="form-label">Search Members</label>
                                <input type="text" class="form-control" id="searchFilter" 
                                       placeholder="Search by username or nickname..." 
                                       value="<%= filters.search %>">
                            </div>
                            <div class="col-md-3">
                                <label for="roleFilter" class="form-label">Filter by Role</label>
                                <select class="form-select" id="roleFilter">
                                    <option value="">All Roles</option>
                                    <% guild.roles.forEach(role => { %>
                                        <option value="<%= role.id %>" 
                                                <%= filters.role === role.id ? 'selected' : '' %>>
                                            <%= role.name %>
                                        </option>
                                    <% }); %>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="sortFilter" class="form-label">Sort By</label>
                                <select class="form-select" id="sortFilter">
                                    <option value="newest" <%= filters.sort === 'newest' ? 'selected' : '' %>>Newest Members</option>
                                    <option value="oldest" <%= filters.sort === 'oldest' ? 'selected' : '' %>>Oldest Members</option>
                                    <option value="username" <%= filters.sort === 'username' ? 'selected' : '' %>>Username A-Z</option>
                                </select>
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button class="btn btn-primary w-100" onclick="applyFilters()">
                                    <i class="fas fa-filter"></i> Apply
                                </button>
                            </div>
                        </div>

                        <!-- Members List -->
                        <div class="members-container">
                            <% members.forEach(member => { %>
                                <div class="member-card">
                                    <div class="row align-items-center">
                                        <div class="col-md-2">
                                            <img src="<%= member.avatar %>" alt="Avatar" class="member-avatar" 
                                                 onclick="showModerationModal('<%= member.id %>', '<%= member.username %>', '<%= member.avatar %>')"
                                                 style="cursor: pointer; transition: transform 0.2s; border: 2px solid transparent;"
                                                 onmouseover="this.style.transform='scale(1.1)'; this.style.borderColor='#007bff';"
                                                 onmouseout="this.style.transform='scale(1)'; this.style.borderColor='transparent';">
                                            <span class="status-indicator status-<%= member.status %>"></span>
                                        </div>
                                        <div class="col-md-3">
                                            <h6 class="mb-1"><%= member.username %></h6>
                                            <% if (member.nickname) { %>
                                                <small class="text-muted">Nick: <%= member.nickname %></small>
                                            <% } %>
                                            <br>
                                            <small class="text-muted">Joined: <%= new Date(member.joinedAt).toLocaleDateString() %></small>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="roles-container">
                                                <% member.roles.forEach(role => { 
                                                    let bgColor = role.color || '#6c757d';

                                                    // Handle cases where role.color might be a number
                                                    if (typeof bgColor === 'number') {
                                                        bgColor = '#' + bgColor.toString(16).padStart(6, '0');
                                                    }

                                                    // Ensure bgColor starts with #
                                                    if (!bgColor.startsWith('#')) {
                                                        bgColor = '#' + bgColor;
                                                    }

                                                    // Convert hex to RGB for brightness calculation
                                                    const hex = bgColor.replace('#', '');
                                                    const r = parseInt(hex.substr(0, 2), 16) || 0;
                                                    const g = parseInt(hex.substr(2, 2), 16) || 0;
                                                    const b = parseInt(hex.substr(4, 2), 16) || 0;

                                                    // Calculate relative luminance using WCAG formula
                                                    const getLuminance = (r, g, b) => {
                                                        const [rs, gs, bs] = [r, g, b].map(c => {
                                                            c = c / 255;
                                                            return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
                                                        });
                                                        return 0.2126 * rs + 0.7152 * gs + 0.0722 * bs;
                                                    };

                                                    const luminance = getLuminance(r, g, b);

                                                    // Use dark text for light backgrounds (luminance > 0.5), white text for dark backgrounds
                                                    const textColor = luminance > 0.5 ? '#000000' : '#ffffff';
                                                    const borderColor = luminance > 0.5 ? 'rgba(0,0,0,0.2)' : 'rgba(255,255,255,0.2)';
                                                    const textShadow = luminance > 0.5 ? '0 1px 2px rgba(255,255,255,0.8)' : '0 1px 2px rgba(0,0,0,0.8)';
                                                %>
                                                    <span class="badge role-badge" 
                                                          style="background-color: <%= bgColor %>; color: <%= textColor %>; border: 1px solid <%= borderColor %>; text-shadow: <%= textShadow %>; font-weight: 600;">
                                                        <%= role.name %>
                                                    </span>
                                                <% }); %>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="d-flex flex-column gap-1">
                                                <button class="btn btn-sm btn-primary btn-action" 
                                                        onclick="showRoleManagement('<%= member.id %>', '<%= member.username %>')">
                                                    <i class="fas fa-user-tag"></i> Manage Roles
                                                </button>
                                                <button class="btn btn-sm btn-warning btn-action" 
                                                        onclick="changeNickname('<%= member.id %>', '<%= member.username %>', '<%= member.nickname || '' %>')">
                                                    <i class="fas fa-signature"></i> Change Nickname
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        </div>

                        <!-- Pagination -->
                        <% if (pagination.total > 1) { %>
                            <nav aria-label="Members pagination">
                                <ul class="pagination justify-content-center">
                                    <% if (pagination.hasPrev) { %>
                                        <li class="page-item">
                                            <a class="page-link" href="?page=<%= pagination.current - 1 %>&search=<%= filters.search %>&role=<%= filters.role %>&sort=<%= filters.sort %>">Previous</a>
                                        </li>
                                    <% } %>

                                    <% for (let i = Math.max(1, pagination.current - 2); i <= Math.min(pagination.total, pagination.current + 2); i++) { %>
                                        <li class="page-item <%= i === pagination.current ? 'active' : '' %>">
                                            <a class="page-link" href="?page=<%= i %>&search=<%= filters.search %>&role=<%= filters.role %>&sort=<%= filters.sort %>"><%= i %></a>
                                        </li>
                                    <% } %>

                                    <% if (pagination.hasNext) { %>
                                        <li class="page-item">
                                            <a class="page-link" href="?page=<%= pagination.current + 1 %>&search=<%= filters.search %>&role=<%= filters.role %>&sort=<%= filters.sort %>">Next</a>
                                        </li>
                                    <% } %>
                                </ul>
                            </nav>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // WebSocket connection for real-time updates
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const ws = new WebSocket(`${protocol}//${window.location.host}`);

        ws.onopen = function() {
            console.log('WebSocket connected');
            ws.send(JSON.stringify({
                type: 'subscribe',
                guildId: '<%= guild.id %>'
            }));
        };

        ws.onmessage = function(event) {
            const data = JSON.parse(event.data);
            if (data.type === 'audit_log' && data.data.guildId === '<%= guild.id %>') {
                console.log('Real-time audit log update:', data.data);
                // Optionally refresh member data if needed
                if (['ROLE_ADD', 'ROLE_REMOVE', 'NICKNAME_CHANGE'].includes(data.data.action)) {
                    // You could refresh the current page or update specific member info
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                }
            }
        };

        ws.onclose = function() {
            console.log('WebSocket disconnected');
        };

        function showNotification(type, title, message, duration = 5000) {
            const container = document.getElementById('notificationContainer');
            if (!container) return;

            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;

            let icon = 'info-circle';
            if (type === 'success') icon = 'check-circle';
            else if (type === 'error') icon = 'exclamation-triangle';
            else if (type === 'warning') icon = 'exclamation-circle';
            else if (type === 'info') icon = 'info-circle';

            notification.innerHTML = `
                <div class="notification-content">
                    <div class="notification-icon">
                        <i class="fas fa-${icon}"></i>
                    </div>
                    <div class="notification-text">
                        <div class="notification-title">${title}</div>
                        <div class="notification-message">${message}</div>
                    </div>
                    <button class="notification-close" onclick="removeNotification(this.parentElement.parentElement)">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="notification-progress" style="width: 100%"></div>
            `;

            container.appendChild(notification);

            // Animate in
            setTimeout(() => {
                notification.classList.add('show');
            }, 100);

            // Auto-remove after duration (except for errors which stay longer)
            if (type !== 'error') {
                const progressBar = notification.querySelector('.notification-progress');
                let width = 100;
                const interval = setInterval(() => {
                    width -= (100 / (duration / 100));
                    progressBar.style.width = width + '%';
                    if (width <= 0) {
                        clearInterval(interval);
                        removeNotification(notification);
                    }
                }, 100);
            }
        }

        function removeNotification(notification) {
            notification.style.transform = 'translateX(100%)';
            notification.style.opacity = '0';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 400);
        }
    </script>

    <script>
        let currentMemberId = '';
        let currentMemberUsername = '';

        function applyFilters() {
            const search = document.getElementById('searchFilter').value;
            const role = document.getElementById('roleFilter').value;
            const sort = document.getElementById('sortFilter').value;

            const params = new URLSearchParams();
            if (search) params.append('search', search);
            if (role) params.append('role', role);
            if (sort) params.append('sort', sort);

            window.location.href = window.location.pathname + '?' + params.toString();
        }

        function showModerationPopup(memberId, username, avatar) {
            currentMemberId = memberId;
            currentMemberUsername = username;
            const modalTitle = document.getElementById('modalMemberName');
            const modalMemberIdSpan = document.getElementById('modalMemberId');
            modalTitle.textContent = username;
            modalMemberIdSpan.textContent = memberId;
            document.getElementById('moderationModal').style.display = 'block';
        }

        function closeModerationModal() {
            document.getElementById('moderationModal').style.display = 'none';
            document.getElementById('moderationReason').value = ''; // Clear reason
        }

        function showRoleManagementModal() {
            closeModerationModal(); // Close moderation modal first

            // Populate role checkboxes based on current roles
            const roleCheckboxes = document.querySelectorAll('#roleManagementModal .form-check-input');
            roleCheckboxes.forEach(checkbox => {
                checkbox.checked = false; // Reset all checkboxes
            });

            // Fetch current member roles (example, in a real app you'd likely have this data available)
            // For now, we'll assume we can re-fetch or have it passed.
            // Since we don't have the actual member roles here, this part needs data.
            // A simple approach would be to pass member's current roles to showModerationPopup and store them.
            // For demonstration, we'll just open the modal.

            document.getElementById('roleModalMemberName').textContent = currentMemberUsername;
            document.getElementById('roleManagementModal').style.display = 'block';
        }

        function closeRoleManagementModal() {
            document.getElementById('roleManagementModal').style.display = 'none';
        }

        async function updateMemberRoles() {
            const roleIdsToAdd = [];
            const roleIdsToRemove = [];
            const checkboxes = document.querySelectorAll('#roleManagementModal .form-check-input');

            checkboxes.forEach(checkbox => {
                if (checkbox.checked) {
                    roleIdsToAdd.push(checkbox.value);
                } else {
                    roleIdsToRemove.push(checkbox.value);
                }
            });

            try {
                showNotification('info', 'Updating Roles...', 'Applying role changes.');

                const response = await fetch(`/api/dashboard/<%= guild.id %>/member/${currentMemberId}/roles`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ add: roleIdsToAdd, remove: roleIdsToRemove })
                });

                const result = await response.json();
                if (result.success) {
                    showNotification('success', 'Roles Updated!', result.message, 4000);
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showNotification('error', 'Role Update Failed', result.error || 'An error occurred.');
                }
            } catch (error) {
                showNotification('error', 'Network Error', 'Failed to update roles due to connection issues.');
            }
            closeRoleManagementModal();
        }

        async function changeNicknameFromModal() {
            const newNickname = prompt(`Enter new nickname for ${currentMemberUsername}:`, currentMemberUsername); // Default to username
            if (newNickname === null) return; // User cancelled

            try {
                showNotification('info', 'Updating Nickname...', 'Please wait while we update the nickname.');

                const response = await fetch(`/api/dashboard/<%= guild.id %>/member/${currentMemberId}/nickname`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ nickname: newNickname.trim() })
                });

                const result = await response.json();
                if (result.success) {
                    showNotification('success', 'Nickname Updated!', `Successfully changed nickname to "${newNickname.trim() || 'None'}"`, 4000);
                    setTimeout(() => location.reload(), 1000);
                    closeModerationModal();
                } else {
                    showNotification('error', 'Update Failed', result.error || 'Failed to update nickname');
                }
            } catch (error) {
                showNotification('error', 'Network Error', 'Failed to change nickname due to connection issues');
            }
        }

        async function submitKickBanAction(action) {
            const reason = document.getElementById('moderationReason').value.trim();
            const deleteMessages = action === 'ban' ? confirm('Delete messages from the last 7 days for ban?') : false;

            if (action === 'kick') {
                try {
                    showNotification('info', 'Submitting Kick Request...', 'Your kick request has been sent for approval.');
                    const response = await fetch(`/api/dashboard/<%= guild.id %>/member/${currentMemberId}/kick-request`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reason })
                    });
                    const result = await response.json();
                    if (result.success) {
                        showNotification('success', 'Kick Request Submitted!', result.message, 4000);
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showNotification('error', 'Request Failed', result.error || 'Failed to submit kick request');
                    }
                } catch (error) {
                    showNotification('error', 'Network Error', 'Failed to submit kick request due to connection issues');
                }
            } else if (action === 'ban') {
                try {
                    showNotification('info', 'Submitting Ban Request...', 'Your ban request has been sent for approval.');
                    const response = await fetch(`/api/dashboard/<%= guild.id %>/member/${currentMemberId}/ban-request`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reason, deleteMessages })
                    });
                    const result = await response.json();
                    if (result.success) {
                        showNotification('success', 'Ban Request Submitted!', result.message, 4000);
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showNotification('error', 'Request Failed', result.error || 'Failed to submit ban request');
                    }
                } catch (error) {
                    showNotification('error', 'Network Error', 'Failed to submit ban request due to connection issues');
                }
            }
            closeModerationModal();
        }

        // Function to show role management directly from the avatar click
        function showRoleManagement(memberId, username) {
            currentMemberId = memberId;
            currentMemberUsername = username;

            // Fetch current member roles (this part is a placeholder, actual implementation needed)
            // For now, we'll just open the modal and assume roles will be populated.

            document.getElementById('roleModalMemberName').textContent = username;
            document.getElementById('roleManagementModal').style.display = 'block';
        }

        // Original manageRole function (kept for reference but replaced by modal logic)
        async function manageRole(memberId, roleId, action) {
            try {
                showNotification('info', `${action === 'add' ? 'Adding' : 'Removing'} Role...`, 'Please wait while we update the member\'s roles.');

                const response = await fetch(`/api/dashboard/<%= guild.id %>/member/${memberId}/role`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ roleId, action })
                });

                const result = await response.json();
                if (result.success) {
                    showNotification('success', 'Role Updated!', result.message, 4000);
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showNotification('error', 'Update Failed', result.error || 'Failed to update role');
                }
            } catch (error) {
                showNotification('error', 'Network Error', 'Failed to manage role due to connection issues');
            }
        }

        // Original changeNickname function (kept for reference but replaced by modal logic)
        async function changeNickname(memberId, username, currentNickname) {
            const newNickname = prompt(`Enter new nickname for ${username}:`, currentNickname || username);

            if (newNickname === null) return; // User cancelled

            try {
                showNotification('info', 'Updating Nickname...', 'Please wait while we update the nickname.');

                const response = await fetch(`/api/dashboard/<%= guild.id %>/member/${memberId}/nickname`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ nickname: newNickname.trim() })
                });

                const result = await response.json();
                if (result.success) {
                    showNotification('success', 'Nickname Updated!', `Successfully changed nickname to "${newNickname.trim() || 'None'}"`, 4000);
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showNotification('error', 'Update Failed', result.error || 'Failed to update nickname');
                }
            } catch (error) {
                showNotification('error', 'Network Error', 'Failed to change nickname due to connection issues');
            }
        }

        // Allow Enter key to apply filters
        document.getElementById('searchFilter').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                applyFilters();
            }
        });
    </script>
</body>
</html>